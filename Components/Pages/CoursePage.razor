@page "/course/{courseName}"
@using OnlineLearningPlatform.Models
@using System.Text.Json
@using Markdig
@using Toolbelt.Blazor.SpeechSynthesis
@inject SpeechSynthesis SpeechSynthesis

<div class="coursepage-title">@Course?.Title</div>
<div class="coursepage-description">
	@{
		var htmlDescription = Markdig.Markdown.ToHtml(Course?.Description ?? "");
	}
	@((MarkupString)htmlDescription)
</div>

@if (Course == null)
{
	<div class="alert alert-warning">Course not found.</div>
	return;
}
else
{
	<div class="coursepage-container">
		<!-- Sidebar -->
		<div class="coursepage-sidebar">
			<div class="coursepage-section-title">Modules</div>
			@if (!sidebarCollapsed)
			{
				<ul class="list-group list-group-flush">
					@for (int i = 0; i < Course.Modules.Count; i++)
					{
						var module = Course.Modules[i];
						<li class="list-group-item coursepage-module-title @(expandedModule == i ? "active" : "")">
							<div @onclick="() => ToggleModule(module)" style="cursor:pointer;">
								@module.Title
								<div class="text-muted" style="font-size:0.95rem;">@module.Description</div>
							</div>

							@if (module == Course.Modules[expandedModule ?? 0])
							{
								<div class="coursepage-section-title" style="margin-top:2rem;">Leçons</div>
								@if (expandedModule.HasValue)
								{
									<ul class="list-group coursepage-lesson-list">
										@for (int j = 0; j < Course.Modules[expandedModule.Value].Lessons.Count; j++)
										{
											var lesson = Course.Modules[expandedModule.Value].Lessons[j];
											<li class="list-group-item coursepage-lesson-item @(SelectedLesson == lesson ? "active" : "")"
												@onclick="() => SelectLesson(expandedModule.Value, lesson)">
												@lesson.Title
											</li>
										}
									</ul>
								}
							}
						</li>
					}
				</ul>
			}
		</div>
		<!-- Main Content -->
		<div class="coursepage-main">
			@if (SelectedLesson != null)
			{
				<div>
					<div class="coursepage-section-title">@SelectedLesson.Title</div>
					<div class="mb-2">@SelectedLesson.Summary</div>
					<div><strong>Durée estimée :</strong> @SelectedLesson.EstimatedMinutes min</div>
					<div class="coursepage-objectives mt-3">
						<strong>Objectifs d'apprentissage :</strong>
						<ul>
							@foreach (var obj in SelectedLesson.LearningObjectives)
							{
								<li>@obj</li>
							}
						</ul>
					</div>
					<div class="mt-3">
						<strong>Contenu :
							<button class="btn btn-sm btn-primary coursepage-speak-btn"
								@onclick="() => SpeakText(SelectedLesson.Content)">
								Écouter
							</button>
						</strong>
						@{
							var htmlContent = Markdig.Markdown.ToHtml(SelectedLesson.Content ?? "");
						}
						<div class="mt-2">@((MarkupString)htmlContent)</div>
					</div>
				</div>
				<!-- Exercises Section -->
				<div class="mt-4">
					<div class="coursepage-section-title">Exercices</div>
					@if (SelectedLesson.Exercises != null && SelectedLesson.Exercises.Count > 0)
					{
						@foreach (var exercise in SelectedLesson.Exercises)
						{
							<div class="coursepage-exercise-card">
								<p><strong>Instruction :</strong> @exercise.Instruction</p>
								<button class="btn btn-sm btn-secondary" @onclick="() => ToggleAnswer(exercise)">
									@( exercise.ShowAnswer ? "Masquer la réponse" : "Afficher la réponse" )
								</button>
								@if (exercise.ShowAnswer)
								{
									<p><strong>Réponse :</strong> @exercise.Answer</p>
								}
								<p><strong>Explication :</strong> @exercise.Explanation</p>
							</div>
						}
					}
					else
					{
						<div>Aucun exercice disponible pour cette leçon.</div>
					}
				</div>
			}
			else
			{
				<div class="alert alert-info">Sélectionnez une leçon pour afficher son contenu.</div>
			}
		</div>
	</div>
}

@code {
	private Course? Course;

	[Parameter]
	public string courseName { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		if (!string.IsNullOrEmpty(courseName))
		{
			var courseFilePath = Path.Combine("./Courses", $"{courseName}.json");
			if (File.Exists(courseFilePath))
			{
				var json = await File.ReadAllTextAsync(courseFilePath);
				Course = JsonSerializer.Deserialize<Course>(json);
			}
			else
			{
				Console.WriteLine($"Course file not found: {courseFilePath}");
			}
		}
		else
		{
			Console.WriteLine("No course name provided in the URL.");
		}
	}

	private bool sidebarCollapsed = false;
	private int? expandedModule = 0;
	private Module? SelectedModule = null;
	private Lesson? SelectedLesson = null;

	private void ToggleModule(Module module)
	{
		if (Course == null) return;
		Console.WriteLine($"Toggling module {module.Title}...");
		expandedModule = expandedModule == Course.Modules.IndexOf(module) ? null : Course.Modules.IndexOf(module);
		SelectedModule = expandedModule.HasValue ? Course.Modules[expandedModule.Value] : null;
		StateHasChanged();
	}

	private void SelectLesson(int moduleIdx, Lesson lesson)
	{
		Console.WriteLine($"Selecting lesson {lesson.Title} from module {moduleIdx}...");
		SelectedLesson = lesson;
		StateHasChanged();
	}

	private async Task SpeakText(string? text)
	{
		if (SpeechSynthesis == null)
		{
			Console.WriteLine("SpeechSynthesis service is not available.");
			return;
		}

		if (!string.IsNullOrWhiteSpace(text))
		{
			var utterance = new SpeechSynthesisUtterance
			{
				Text = text,
				Lang = "fr-FR", // BCP 47 language tag
				Pitch = 1.0, // 0.0 ~ 2.0 (Default 1.0)
				Rate = 1.0, // 0.1 ~ 10.0 (Default 1.0)
				Volume = 1.0 // 0.0 ~ 1.0 (Default 1.0)
			};
			await SpeechSynthesis.SpeakAsync(utterance);
		}
	}

	private void ToggleAnswer(Exercise exercise)
	{
		exercise.ShowAnswer = !exercise.ShowAnswer;
		StateHasChanged();
	}
}